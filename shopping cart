// Shopping Cart Functionality

// Add to Cart
function addToCart(product) {
  // 1. Get the current cart from local storage or initialize an empty cart
  let cart = JSON.parse(localStorage.getItem('cart')) || [];

  // 2. Check if the product is already in the cart
  const existingProductIndex = cart.findIndex(item => item.id === product.id);

  if (existingProductIndex !== -1) {
    // 3a. If product exists, update quantity
    cart[existingProductIndex].quantity++;
  } else {
    // 3b. If product doesn't exist, add it to the cart
    cart.push({
      id: product.id,
      name: product.name,
      price: product.price,
      quantity: 1
    });
  }

  // 4. Save the updated cart to local storage
  localStorage.setItem('cart', JSON.stringify(cart));
}

// View Cart
function viewCart() {
  // 1. Get the cart from local storage
  const cart = JSON.parse(localStorage.getItem('cart')) || [];

  // 2. Display the cart content on the page (using DOM manipulation)
  const cartContainer = document.getElementById('cart-container');
  cartContainer.innerHTML = ''; // Clear previous content

  if (cart.length === 0) {
    cartContainer.innerHTML = '<p>Your cart is empty.</p>';
  } else {
    cart.forEach(item => {
      const cartItem = document.createElement('div');
      cartItem.innerHTML = `
        <p>${item.name} - Quantity: ${item.quantity} - Price: $${item.price * item.quantity}</p>
        <button onclick="updateCartItem('${item.id}', 1)">+</button>
        <button onclick="updateCartItem('${item.id}', -1)">-</button>
        <button onclick="removeFromCart('${item.id}')">Remove</button>
      `;
      cartContainer.appendChild(cartItem);
    });
  }
}

// Update Cart
function updateCartItem(productId, quantityChange) {
  // 1. Get the cart from local storage
  const cart = JSON.parse(localStorage.getItem('cart')) || [];

  // 2. Find the product in the cart
  const productIndex = cart.findIndex(item => item.id === productId);

  if (productIndex !== -1) {
    // 3. Update the quantity
    cart[productIndex].quantity += quantityChange;

    // 4. Remove if quantity becomes 0
    if (cart[productIndex].quantity <= 0) {
      cart.splice(productIndex, 1);
    }

    // 5. Save the updated cart to local storage
    localStorage.setItem('cart', JSON.stringify(cart));

    // 6. Update the cart display
    viewCart();
  }
}

// Remove from Cart
function removeFromCart(productId) {
  // 1. Get the cart from local storage
  const cart = JSON.parse(localStorage.getItem('cart')) || [];

  // 2. Filter out the product to remove
  const updatedCart = cart.filter(item => item.id !== productId);

  // 3. Save the updated cart to local storage
  localStorage.setItem('cart', JSON.stringify(updatedCart));

  // 4. Update the cart display
  viewCart();
}
